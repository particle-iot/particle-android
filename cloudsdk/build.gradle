plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}


// This is the library version used when publishing the artifact
version = '1.0.1'

ext {
    bintrayRepo = 'android'
    bintrayName = 'cloud-sdk'
    bintrayOrg = 'particle'

    publishedGroupId = 'io.particle'
    libraryName = "Particle (formerly Spark) Android Cloud SDK library"
    artifact = 'cloudsdk'

    libraryDescription = "The Particle Android Cloud SDK enables Android apps to interact with Particle-powered connected products via the Particle Cloud.\n" +
            "Library will allow you to easily manage active user sessions to Particle cloud, query for device info,\n" +
            "read and write data to/from Particle Core/Photon devices and (via exposed variables and functions)\n" +
            "publish and subscribe events to/from the cloud or to/from devices (coming soon)."

    siteUrl = 'https://github.com/particle-iot/particle-android'
    gitUrl = 'https://github.com/particle-iot/particle-android.git'

    libraryVersion = project.version

    developerId = 'idok'
    developerName = 'Ido Kleinman'
    developerEmail = 'ido@particle.io'

    licenseName = 'The Apache Software License, Version 2.0'
    licenseUrl = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
    allLicenses = ["Apache-2.0"]
}


android {
    compileSdkVersion 33

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 33
        versionCode 1
        versionName project.version

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles 'consumer-proguard-rules.pro'
    }

    testOptions {
        unitTests.all {
            testLogging {
                events "passed", "failed", "standardError"
                showCauses true
                showExceptions true
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    androidExtensions {
        experimental = true
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    api "io.github.microutils:kotlin-logging:1.7.8"

    api 'com.google.code.findbugs:jsr305:3.0.2'
    api 'com.google.code.gson:gson:2.8.5'
    api 'com.squareup.okhttp:okhttp:2.7.5'
    api 'com.squareup.okio:okio:2.3.0'
    api 'com.squareup.retrofit:retrofit:1.9.0'
    api 'org.greenrobot:eventbus:3.0.0'
    api 'androidx.collection:collection-ktx:1.1.0'
    api 'androidx.core:core-ktx:1.1.0'
    api 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0'

    testImplementation 'junit:junit:4.12'
    testImplementation 'com.squareup.okhttp:mockwebserver:2.7.5'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}

repositories {
    maven {
        url 'https://maven.google.com'
    }
}

apply from: '../pom_generator_v1.gradle'
apply from: '../bintray_upload_v1.gradle'

// Disable javadoc generation.  See this bug for more info:
// https://github.com/novoda/bintray-release/issues/71
allprojects {
    tasks.withType(Javadoc) {
        enabled = false
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/reports")
}


coveralls {
    jacocoReportPath 'build/reports/jacocoTestReport/jacocoTestReport.xml'
}
task jacocoTestReport(type: JacocoReport, dependsOn: "testDebugUnitTest") {
    group = "Reporting"
    description = "Generate Jacoco code coverage reports for debug builds"

    reports {
        xml.enabled = true   // coveralls needs the xml format report
        html.enabled = false // no need for HTML reports when we have coveralls
    }

    def excludes = ['**/R.class',
                    '**/R$*.class',
                    '**/*$ViewBinder*.*',
                    '**/*$InjectAdapter*.*',
                    '**/*Injector*.*',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    '**/*Activity*.*',
                    '**/CiMattersApplication*.*',
                    'android/**/*.*',
                    '**/*kaazing*/**/*.*'
    ]

    def debugTree = fileTree(
            dir: "$buildDir/intermediates/javac/debug/classes/io/particle/android/sdk",
            excludes: excludes)
    def kotlinDebugTree = fileTree(
            dir: "$buildDir/tmp/kotlin-classes/debug",
            excludes: excludes)
    def mainSrc = "${project.projectDir}/src/main/java"

    getClassDirectories().setFrom(files([debugTree], [kotlinDebugTree]))
    getExecutionData().setFrom(files("$buildDir/jacoco/testDebugUnitTest.exec"))
    getSourceDirectories().setFrom(files([mainSrc]))
}

